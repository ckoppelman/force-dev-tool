#!/usr/bin/env node

"use strict";

var docopt = require('docopt').docopt;
require("dotenv").config({silent: true});
var chalk = require("chalk");
var tabtab = require('tabtab');
var path = require('path');
var Fdt = require('../lib/index');
var packageJson = require('../package.json');

var doc = "force-dev-tool.\n" +
"\n" +
"Usage:\n" +
"	force-dev-tool <command> [<args>...]\n" +
"	force-dev-tool -h | --help\n" +
"	force-dev-tool --version\n" +
"\n" +
"Options:\n" +
"	-h --help       Show this screen.\n" +
"	--version       Show version.\n" +
"\n" +
"Commands:\n" +
"	help            Print help for a command or in general\n" +
"	remote          Manage orgs (list, add, remove, set default, set password)\n" +
"	fetch           Fetch describe information from a remote\n" +
"	package         Generate a package.xml file from local describe information\n" +
"	retrieve        Retrieve metadata specified in package.xml\n" +
"	test            Execute unit tests\n" +
"	validate        Validate metadata deployment\n" +
"	validateTest    Validate metadata deployment and run local unit tests\n" +
"	deploy          Deploy metadata\n" +
"	deployTest      Deploy metadata and run local unit tests\n" +
"	changeset       Create a changeset/deployment from a unified diff input or cli args\n" +
"	completion      Print command line completion\n" +
"	query           Execute a SOQL query\n" +
"\n" +
"See 'force-dev-tool help <command>' for more information on a specific command.";

var opts = docopt(doc, {version: packageJson.version, options_first: true});

var command = opts['<command>'];
var args = opts['<args>'];
var topic = (args !== null && args.length > 0) ? args[0] : null;
var validCommands = ['remote', 'fetch', 'package', 'retrieve', 'test', 'validate', 'validateTest', 'deploy', 'deployTest', 'changeset', 'baseBranch', 'backup', 'query'];
var validCommandsRegExp = new RegExp('^force-dev-tool\\s(' + validCommands.join('|') + ')\\w?');

var storage = new Fdt.Storage({
	path: process.cwd()
});
var remotes = new Fdt.Providers.Multi({
	providers: [
		new Fdt.Providers.Config({path: path.join(storage.configPath, '.orgs.json')}),
		new Fdt.Providers.Env({env: process.env})
	]
});
var project = new Fdt.Project({
	storage: storage,
	remotes: remotes
});
var SubCommand;

if (command === 'help') {
	if (validCommands.indexOf(topic) !== -1) {
		SubCommand = require('../lib/cli/' + topic);
		new SubCommand(project).help();
	}
	else {
		console.log(doc);
	}
}
else if (command === 'completion') {
	return tabtab.complete('force-dev-tool', function(err, data) {
		if (err || !data) {
			return;
		}
		// TODO: use docopt parse information instead
		if (validCommandsRegExp.test(data.line)) {
			SubCommand = require('../lib/cli/' + data.line.split(/\s/)[1]);
			return new SubCommand(project).complete(tabtab, data);
		}
		if (/^--\w?/.test(data.last)) {
			return tabtab.log(['help', 'version'], data, '--');
		}
		if (/^-\w?/.test(data.last)) {
			return tabtab.log(['h'], data, '-');
		}
		tabtab.log(validCommands.concat(['help', '--help', '--version', '-h']), data);
	});
}
else if (validCommands.indexOf(command) !== -1)
{
	SubCommand = require('../lib/cli/' + command);
	new SubCommand(project).process(function(err, message){
		if (err) {
			console.log(chalk.red(err));
			process.exit(1);
		}
		if (message) {
			console.log(chalk.green(message));
		}
	});
}
else {
	console.log(doc);
	process.exit(1);
}
